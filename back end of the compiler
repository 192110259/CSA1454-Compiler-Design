#include <stdio.h>
#include <stdlib.h>

// Example intermediate code representation
typedef struct {
    char operation;  // 'A' for addition, 'S' for subtraction, 'M' for multiplication
    int operand1;
    int operand2;
    int result;
} IntermediateCode;

// Function to generate target code from intermediate code
void generateTargetCode(IntermediateCode* intermediateCodes, int numCodes) {
    printf("Target Code:\n");

    for (int i = 0; i < numCodes; i++) {
        IntermediateCode code = intermediateCodes[i];

        switch (code.operation) {
            case 'A':
                printf("ADD R%d, R%d, R%d\n", code.result, code.operand1, code.operand2);
                break;
            case 'S':
                printf("SUB R%d, R%d, R%d\n", code.result, code.operand1, code.operand2);
                break;
            case 'M':
                printf("MUL R%d, R%d, R%d\n", code.result, code.operand1, code.operand2);
                break;
            default:
                printf("Invalid operation\n");
                exit(1);
        }
    }
}

int main() {
    // Example intermediate code
    IntermediateCode intermediateCodes[] = {
        {'A', 1, 2, 3},  // R3 = R1 + R2
        {'S', 4, 3, 5},  // R5 = R4 - R3
        {'M', 6, 5, 7}   // R7 = R6 * R5
    };

    int numCodes = sizeof(intermediateCodes) / sizeof(IntermediateCode);

    // Generate target code
    generateTargetCode(intermediateCodes, numCodes);

    return 0;
}
